{"version":3,"sources":["components/DropdownSearch/style.js","components/DropdownSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["DropdownSearchCss","styled","div","DropdownSearch","props","toggleDropDown","setState","searchable","state","allChecked","colors","map","ele","checked","allUnChecked","handleChange","event","filter","target","value","inputChange","tagetValue","console","log","includes","printValue","submitData","this","mainTitle","subTitleOne","subTitleTwo","searchFilter","lowercasedFilter","toLowerCase","filteredData","item","Object","keys","some","key","className","onClick","type","placeholder","onChange","color","index","id","enent","htmlFor","href","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"u7HAEA,IAAMA,E,MAAoBC,EAAOC,IAAV,KCsJRC,E,YAnJb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAcRC,eAAiB,WACf,EAAKC,SAAS,CACZC,YAAa,EAAKC,MAAMD,cAjBT,EAoBnBE,WAAa,WAAO,IACVC,EAAW,EAAKF,MAAhBE,OACRA,EAAOC,KAAI,SAAAC,GACT,OAAQA,EAAIC,SAAU,KAExB,EAAKP,SAAS,CACZI,OAAQA,KA1BO,EA6BnBI,aAAe,aA7BI,EAgCnBC,aAAe,SAAAC,GAKb,EAAKV,SAAS,CAAEW,OAAQD,EAAME,OAAOC,SArCpB,EAuCnBC,YAAc,SAAAJ,GAAU,IACdN,EAAW,EAAKF,MAAhBE,OADa,EAEkBM,EAAME,OAA9BG,EAFM,EAEbF,MAAmBN,EAFN,EAEMA,QAC3BS,QAAQC,IAAI,QAASF,EAAYR,GACjCH,EAAOC,KAAI,SAAAC,GAIT,MAHI,CAACS,GAAYG,SAASZ,EAAIO,SAC5BP,EAAIC,SAAWD,EAAIC,SAEdD,KAET,EAAKN,SAAS,CACZI,OAAQA,KAlDO,EAqDnBe,WAAa,WAEX,OADmB,EAAKjB,MAAhBE,OACMC,KAAI,SAAAC,GAChB,IAAIc,EAAad,EAAIO,MACrBG,QAAQC,IAAIG,OAvDd,EAAKlB,MAAQ,CACXD,YAAY,EACZU,OAAQ,GACRP,OAAQ,IALO,E,iFAQE,IACXA,EAAWiB,KAAKvB,MAAhBM,OAERiB,KAAKrB,SAAS,CACZI,OAAQA,M,+BAgDF,IAAD,SACyCiB,KAAKvB,MAA7CwB,EADD,EACCA,UAAWC,EADZ,EACYA,YAAaC,EADzB,EACyBA,YADzB,EAEkCH,KAAKnB,MAA9BuB,EAFT,EAECd,OAAsBP,EAFvB,EAEuBA,OACxBsB,EAAmBD,EAAaE,cAChCC,EAAexB,EAAOO,QAAO,SAAAkB,GAIjC,OAHcC,OAAOC,KAAKF,GAAMG,MAAK,SAAAC,GAAG,OACtCJ,EAAKI,GAAKN,cAAcT,SAASQ,SAIrC,OACE,kBAAChC,EAAD,KACE,yBAAKwC,UAAU,aACb,yBAAKA,UAAU,kBACb,4BAAKZ,GACL,uCACA,yBAAKY,UAAU,WAAWC,QAASd,KAAKtB,gBACtC,8BAAOwB,IAERF,KAAKnB,MAAMD,WACV,kBAAC,WAAD,KACE,4BAAKuB,GACL,2BACEY,KAAK,OACLC,YAAY,SACZH,UAAU,YACVrB,MAAOY,EACPa,SAAUjB,KAAKZ,eAEjB,yBAAKyB,UAAU,0BACb,yBAAKA,UAAU,cACb,0BAAMA,UAAU,YAAYC,QAASd,KAAKlB,YAA1C,MAIF,wBAAI+B,UAAU,iBACXN,EAAavB,KAAI,SAACkC,EAAOC,GAAR,OAChB,wBAAIN,UAAU,uBAAuBD,IAAKO,GACxC,2BACEJ,KAAK,WACLK,GAAIF,EAAME,GACV5B,MAAO0B,EAAMA,MACbL,UAAU,SACV3B,QAASgC,EAAMhC,QACf+B,SAAU,SAAAI,GAAK,OAAI,EAAK5B,YAAY4B,MAEtC,2BAAOR,UAAU,iBAAiBS,QAASJ,EAAME,IAC/C,0BAAMP,UAAU,aAAarB,MAAO0B,EAAMA,OACvCA,EAAMA,aAMjB,yBAAKL,UAAU,iBACb,4BACEA,UAAU,WACVU,KAAK,IACLT,QAASd,KAAKb,cAHhB,SAOA,4BACE0B,UAAU,YACVU,KAAK,IACLT,QAASd,KAAKF,YAHhB,aAUJ,Y,GArIa0B,aC6BdC,G,kBA5Bb,WAAYhD,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CACXE,OAAQ,CACN,CAAEmC,MAAO,MAAOE,GAAI,OAAQ5B,MAAO,OACnC,CAAE0B,MAAO,OAAQE,GAAI,OAAQ5B,MAAO,QACpC,CAAE0B,MAAO,QAASE,GAAI,OAAQ5B,MAAO,SACrC,CAAE0B,MAAO,QAASE,GAAI,OAAQ5B,MAAO,SACrC,CAAE0B,MAAO,QAASE,GAAI,OAAQ5B,MAAO,SACrC,CAAE0B,MAAO,OAAQE,GAAI,OAAQ5B,MAAO,QACpC,CAAE0B,MAAO,SAAUE,GAAI,OAAQ5B,MAAO,YAVzB,E,sEAejB,OACE,6BACE,kBAAC,EAAD,CACET,OAAQiB,KAAKnB,MAAME,OACnBkB,UAAU,uBACVC,YAAY,UACZC,YAAY,kB,GAtBJqB,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.282176f9.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst DropdownSearchCss = styled.div`\n  .container {\n    width: 700px;\n    background: #f1f1f1;\n    border-radius: 16px;\n    padding: 80px 0 120px 100px;\n    box-sizing: border-box;\n    margin: 50px auto;\n  }\n  .innerContainer {\n    width: 300px;\n    h1 {\n      font-size: 28px;\n    }\n    h2 {\n      font-size: 18px;\n      margin: 40px 0 20px;\n    }\n    .dropDown,\n    .searchBox,\n    .contentTop,\n    .customCheckboxHolder {\n      border: 1px solid #ccc;\n      height: 40px;\n      width: 100%;\n      border-radius: 4px;\n      font-size: 16px;\n      background: #fff;\n      font-weight: 500;\n      padding: 10px;\n      box-sizing: border-box;\n      color: #696969;\n    }\n  }\n  .dropDown {\n    position: relative;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    &:after {\n      content: \"▼\";\n      display: flex;\n      position: absolute;\n      right: 8px;\n      font-size: 12px;\n    }\n    span {\n      width: 265px;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      overflow: hidden;\n    }\n  }\n\n  .dropDownContentWrapper {\n    box-shadow: 0px 0px 8px 0px #ccc;\n    margin-top: 3px;\n    .contentTop {\n      border: 0;\n      border-radius: 0;\n      border-bottom: 1px solid #ccc;\n      .selectAll {\n        height: 18px;\n        width: 18px;\n        color: #fff;\n        background: black;\n        display: flex;\n        justify-content: center;\n        font-size: 25px;\n        align-items: center;\n        padding-bottom: 5px;\n        box-sizing: border-box;\n        border-radius: 3px;\n        cursor: pointer;\n      }\n    }\n    .contentMiddle {\n      height: 160px;\n      overflow: hidden;\n      overflow-y: scroll;\n      .customCheckboxHolder {\n        position: relative;\n        border: 0;\n        border-bottom: 1px solid #ccc;\n        list-style: none;\n        border-radius: 0;\n        input {\n          height: 100%;\n          width: 100%;\n          position: absolute;\n          top: 0;\n          opacity: 0;\n          left: 0;\n          z-index: 1;\n          cursor: pointer;\n          &:checked {\n            & + .customCheckbox {\n              &:before {\n                background-color: black;\n              }\n              span {\n                color: cornflowerblue;\n                font-weight: bold;\n              }\n            }\n          }\n        }\n        .customCheckbox {\n          display: inline-block;\n          position: relative;\n          width: 100%;\n          transition: all 0.35s linear;\n          &:before {\n            content: \"✓\";\n            color: #fff;\n            font-size: 12px;\n            position: absolute;\n            width: 18px;\n            height: 18px;\n            line-height: 17px;\n            background-color: #fff;\n            text-align: center;\n            transition: all 0.35s linear;\n            border: 1px solid #000;\n            border-radius: 3px;\n            box-sizing: border-box;\n          }\n          span {\n            color: #000;\n            font-size: 14px;\n            margin-left: 30px;\n          }\n        }\n      }\n    }\n    .contentBottom {\n      height: 60px;\n      background: #fff;\n      display: flex;\n      justify-content: flex-end;\n      padding: 0 10px;\n      align-items: center;\n      button {\n        text-decoration: none;\n        font-weight: bold;\n        font-size: 16px;\n        cursor: pointer;\n        &.clearBtn {\n          color: darkslategrey;\n          margin-right: 30px;\n        }\n        &.submitBtn {\n          color: lightseagreen;\n          font-size: 18px;\n        }\n      }\n    }\n  }\n`;\n\nexport { DropdownSearchCss };\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { DropdownSearchCss } from \"./style\";\n\nclass DropdownSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchable: false,\n      filter: \"\",\n      colors: []\n    };\n  }\n  componentDidMount() {\n    const { colors } = this.props;\n    // const colorsMap = colors.map(ele => ele.checked = false);\n    this.setState({\n      colors: colors\n    });\n  }\n  toggleDropDown = () => {\n    this.setState({\n      searchable: !this.state.searchable\n    });\n  };\n  allChecked = () => {\n    const { colors } = this.state;\n    colors.map(ele => {\n      return (ele.checked = true);\n    });\n    this.setState({\n      colors: colors\n    });\n  };\n  allUnChecked = () => {\n    // const { colors } = this.props;\n  };\n  handleChange = event => {\n    // const { colors } = this.state;\n    // colors.map(ele => {\n    //   return delete ele.checked, delete ele.value;\n    // });\n    this.setState({ filter: event.target.value });\n  };\n  inputChange = event => {\n    const { colors } = this.state;\n    const { value: tagetValue, checked } = event.target;\n    console.log(\"Input\", tagetValue, checked);\n    colors.map(ele => {\n      if ([tagetValue].includes(ele.value)) {\n        ele.checked = !ele.checked;\n      }\n      return ele;\n    });\n    this.setState({\n      colors: colors\n    });\n  };\n  printValue = () => {\n    const { colors } = this.state;\n    return colors.map(ele => {\n      let submitData = ele.value;\n      console.log(submitData);\n    });\n  };\n  render() {\n    const { mainTitle, subTitleOne, subTitleTwo } = this.props;\n    const { filter: searchFilter, colors } = this.state;\n    const lowercasedFilter = searchFilter.toLowerCase();\n    const filteredData = colors.filter(item => {\n      const fData = Object.keys(item).some(key =>\n        item[key].toLowerCase().includes(lowercasedFilter)\n      );\n      return fData;\n    });\n    return (\n      <DropdownSearchCss>\n        <div className=\"container\">\n          <div className=\"innerContainer\">\n            <h1>{mainTitle}</h1>\n            <h2>Default</h2>\n            <div className=\"dropDown\" onClick={this.toggleDropDown}>\n              <span>{subTitleOne}</span>\n            </div>\n            {this.state.searchable ? (\n              <Fragment>\n                <h2>{subTitleTwo}</h2>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  className=\"searchBox\"\n                  value={searchFilter}\n                  onChange={this.handleChange}\n                />\n                <div className=\"dropDownContentWrapper\">\n                  <div className=\"contentTop\">\n                    <span className=\"selectAll\" onClick={this.allChecked}>\n                      -\n                    </span>\n                  </div>\n                  <ul className=\"contentMiddle\">\n                    {filteredData.map((color, index) => (\n                      <li className=\"customCheckboxHolder\" key={index}>\n                        <input\n                          type=\"checkbox\"\n                          id={color.id}\n                          value={color.color}\n                          className=\"chkBox\"\n                          checked={color.checked}\n                          onChange={enent => this.inputChange(enent)}\n                        />\n                        <label className=\"customCheckbox\" htmlFor={color.id}>\n                          <span className=\"labelValue\" value={color.color}>\n                            {color.color}\n                          </span>\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                  <div className=\"contentBottom\">\n                    <button\n                      className=\"clearBtn\"\n                      href=\"#\"\n                      onClick={this.allUnChecked}\n                    >\n                      Clear\n                    </button>\n                    <button\n                      className=\"submitBtn\"\n                      href=\"#\"\n                      onClick={this.printValue}\n                    >\n                      Submit\n                    </button>\n                  </div>\n                </div>\n              </Fragment>\n            ) : null}\n          </div>\n        </div>\n      </DropdownSearchCss>\n    );\n  }\n}\n\nDropdownSearch.propTypes = {\n  colors: PropTypes.array,\n  mainTitle: PropTypes.string,\n  subTitleOne: PropTypes.string,\n  subTitleTwo: PropTypes.string\n};\n\nexport default DropdownSearch;\n","import React, { Component } from \"react\";\nimport DropdownSearch from \"./components/DropdownSearch\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: [\n        { color: \"Red\", id: \"chk1\", value: 'red' },\n        { color: \"Blue\", id: \"chk2\", value: 'blue' },\n        { color: \"Green\", id: \"chk3\", value: 'green' },\n        { color: \"Black\", id: \"chk4\", value: 'black' },\n        { color: \"White\", id: \"chk5\", value: 'white' },\n        { color: \"Gray\", id: \"chk6\", value: 'gray' },\n        { color: \"Orange\", id: \"chk7\", value: 'orange' }\n      ]\n    };\n  }\n  render() {\n    return (\n      <div>\n        <DropdownSearch\n          colors={this.state.colors}\n          mainTitle=\"Dropdown with search\"\n          subTitleOne=\"Colours\"\n          subTitleTwo=\"Dropdown\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}